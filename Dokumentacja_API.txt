Dostępne ścieżki

- http://152.70.175.119:8080/api/chart
Metoda: GET
Co robi: Generuje wykres z ThingSpeak z danych o podanych datach
Możliwe opcje do dodania:
	field - z którego fielda bierzemy dane
	title - tytuł wykresu (spacje zamieniamy na %20)
	width - szerokość wykresu
	height - wysokość wykresu
	color - kolor wykresu w formacie HEX (bez #)
	start - data od której ma zacząć wyświetlać dane (w formacie YYYY-MM-DD%20HH:mm:ss)
	end - data do której ma zakończyć wyświetlać dane (w formacie YYYY-MM-DD%20HH:mm:ss)

Zwraca: Dokument HTMl od ThingSpeak, który zawiera interaktywny wykres o danych parametrach
Sposób użycia: np.
    <iframe
        width="480"
        height="640"
        style="border: 1px solid #cccccc;"
        src="http://152.70.175.119:8080/api/chart?title=Test%205&start=2025-06-08%2012:50:00&end=2025-06-08%2013:20:00">
    </iframe>

- http://152.70.175.119:8080/api/feeds
Metoda: GET
Co robi: zwraca listę wszystkich danych, które są w bazie ThingSpeak
Możliwe opcje do dodania: brak
Zwraca: listę w formacie JSON
Sposób użycia: jak ścieżka

- http://152.70.175.119:8080/api/feeds/range
Metoda: GET
Co robi: zwraca listę danych z danego zakresu dat.
Możliwe opcje do dodania: 
	!!!!WYMAGANE!!!! start - data od której ma zacząć zbierać dane do wyświetlenia (w formacie YYYY-MM-DD%20HH:mm:ss) !!!!WYMAGANE!!!!
	!!!!WYMAGANE!!!! end - data do której ma zakończyć zbierać dane do wyświetlenia (w formacie YYYY-MM-DD%20HH:mm:ss) !!!!WYMAGANE!!!!
Zwraca: listę w formacie JSON
Sposób użycia: http://152.70.175.119:8080/api/feeds/range?start=2025-06-08%2012:50:00&end=2025-06-08%2013:20:00


- http://152.70.175.119:8080/api/feeds/edit
Metoda: POST
Co robi: modyfikuje dany feed
Request Body: 
	Feed w formacie JSON: przykład... (schemat ten sam, inne dane)
	{
            "created_at": "2025-06-08T13:27:16+02:00",
            "entry_id": 13,
            "field1": "11.96",
            "field2": "229.06",
            "field3": "1.776"
        }
Zwraca: listę w formacie JSON
Sposób użycia: http://152.70.175.119:8080/api/feeds/range?start=2025-06-08%2012:50:00&end=2025-06-08%2013:20:00


- http://152.70.175.119:8080/api/feeds/push-edits
Metoda: GET
Co robi: wysyla zmienione feedsy do bazy ThingSpeak
Możliwe opcje do dodania: 
Zwraca: response od ThingSpeak
Sposób użycia: ścieżka


- http://152.70.175.119:8080/api/users/create
Metoda: POST
Co robi: tworzy nowego użytkownika
Request Body: user w formacie JSON (schemat poniżej)
{
    "login": "test",
    "password": "test",
    "email": "test.test@test.com",
    "name": "Test1",
    "surname": "Test2",
    "role": "ADMIN"
}
Zwraca: w przypadku powodzenia (obiekt Usera oraz ErrorResponse jako null)
{
    "user": {
        "_id": 4,
        "login": "test5",
        "password": "test",
        "email": "test.test@test.com",
        "name": "Test1",
        "surname": "Test2",
        "role": "ADMIN"
    },
    "errorResponse": null
}
Sposób użycia: ścieżka


- http://152.70.175.119:8080/api/users/login
Metoda: POST
Co robi: sprawdza czy dany login i hasło pasują do któregoś z użytkowników w bazie danych.
Request Body: LoginRequest w formacie JSON (schemat poniżej)
{
    "login": "test",
    "password": "test"
}
Zwraca: w przypadku powodzenia (obiekt Usera oraz ErrorResponse jako null)
{
    "user": {
        "_id": 2,
        "login": "test3",
        "password": "test",
        "email": "test.test@test.com",
        "name": "Test1",
        "surname": "Test2",
        "role": "ADMIN"
    },
    "errorResponse": null
}

w przypadku niepowodzenia (i taki schemat jest prawie wszędzie, w zależności od tego co robimy albo co jest zle to inna wiadomość)

{
    "user": null,
    "errorResponse": {
        "error": "User not found",
        "message": "No user found with the provided login."
    }
}

Sposób użycia: ścieżka


- http://152.70.175.119:8080/api/users/edit
Metoda: POST
Co robi: modyfikuje dane o użytkowniku
Request Body: User w formacie JSON (schemat poniżej)
{
    "_id": 0,
    "login": "test1",
    "password": "test",
    "email": "test123456.test@test.com",
    "name": "Test1",
    "surname": "Test2",
    "role": "USER"
}

Zwraca: w przypadku powodzenia (obiekt Usera oraz ErrorResponse jako null)
{
    "user": {
        "_id": 0,
        "login": "test1",
        "password": "test",
        "email": "test123456.test@test.com",
        "name": "Test1",
        "surname": "Test2",
        "role": "USER"
    },
    "errorResponse": null
}

w przypadku niepowodzenia (i taki schemat jest prawie wszędzie, w zależności od tego co robimy albo co jest zle to inna wiadomość)

{
    "user": null,
    "errorResponse": {
        "error": "User not found",
        "message": "No user with ID 6 exists."
    }
}

Sposób użycia: ścieżka


- http://152.70.175.119:8080/api/users/delete
Metoda: POST
Co robi: modyfikuje dane o użytkowniku
Request Body: User w formacie JSON (schemat poniżej)
{
    "id": 0
}
Zwraca: w przypadku powodzenia (obiekt Usera oraz ErrorResponse jako null)
{
    "user": {
        "_id": 2,
        "login": "test3",
        "password": "test",
        "email": "test.test@test.com",
        "name": "Test1",
        "surname": "Test2",
        "role": "ADMIN"
    },
    "errorResponse": null
}

w przypadku niepowodzenia (i taki schemat jest prawie wszędzie, w zależności od tego co robimy albo co jest zle to inna wiadomość)

{
    "user": null,
    "errorResponse": {
        "error": "User not found",
        "message": "No user with ID 0 exists."
    }
}

Sposób użycia: ścieżka


